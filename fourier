import numpy as np
import matplotlib.pyplot as plt

NUM_TERMS = 50

# Dominio =================================================================================================
MESH_X = 5000
tau = 9.0
t_end = 4 * tau
keq = 400
meq = 2
wn = np.sqrt(keq/meq)
zt = 0.06
t = np.linspace(0, t_end, MESH_X)

# Funcoes =================================================================================================
functions = [
    (lambda t: np.where((0 <= t) & (t < 0.5), 0, 0), '0'),
    (lambda t: np.where((0.5 <= t) & (t < 1.0), 1, 0), '1'),
    (lambda t: np.where((1.0 <= t) & (t < 2.0), 4 - t, 0), '4 - t'),
    (lambda t: np.where((2.0 <= t) & (t < 3.0), 4.5 - t, 0), '4.5 - t'),
    (lambda t: np.where((3.0 <= t) & (t < 4.0), 8 - 2*t, 0), '8 - 2*t'),
    (lambda t: np.where((4.0 <= t) & (t < 5.0), 0, 0), '0'),
    (lambda t: np.where((5.0 <= t) & (t < 6.0), 5 - t, 0), '5 - t'),
    (lambda t: np.where((6.0 <= t) & (t < 7.0), 5.5 - t, 0), '5.5 - t'),
    (lambda t: np.where((7.0 <= t) & (t < 8.0), 6 - t, 0), '6 - t'),
    (lambda t: np.where((8.0 <= t) & (t < 8.5), -0.5, 0), '-0.5'),
    (lambda t: np.where((8.5 <= t) & (t < 9.0), 0, 0), '0')
]

# Definicao dos coeficientes ==============================================================================
def fourier_coefficients_combined(funcs, num_terms):
    a0 = 2 / tau * np.sum(np.fromiter((np.sum(func(t % tau)) for func, _ in funcs), float)) * (tau / MESH_X)
    ak = np.zeros(num_terms)
    bk = np.zeros(num_terms)
    for k in range(1, num_terms + 1):
        ak[k-1] = 2 / tau * np.sum(np.fromiter((np.sum(func(t % tau) * np.cos(2*np.pi*k*(t % tau)/tau)) for func, _ in funcs), float)) * (tau / MESH_X)
        bk[k-1] = 2 / tau * np.sum(np.fromiter((np.sum(func(t % tau) * np.sin(2*np.pi*k*(t % tau)/tau)) for func, _ in funcs), float)) * (tau / MESH_X)
    return a0, ak, bk

# Definicao da serie de Fourier ===========================================================================
def fourier_series_combined(t, a0, ak, bk, num_terms):
    series = np.full_like(t, a0 / 2)
    for k in range(num_terms):
        series += ak[k] * np.cos(2*np.pi*(k+1)*t/tau) + bk[k] * np.sin(2*np.pi*(k+1)*t/tau)
    return series

# Calcular os coeficientes de Fourier para a funÃ§Ã£o combinada =============================================
a0_combined, ak_combined, bk_combined = fourier_coefficients_combined(functions, NUM_TERMS)

# Calculando os coeficientes para todas as funcoes ========================================================
def combined_function(t):
    combined = np.zeros_like(t)
    for func, _ in functions:
        combined += func(t % tau)
    return combined

# Calculando a funÃ§Ã£o combinada original ==================================================================
original_combined = combined_function(t)

# Calculando a aproximaÃ§Ã£o da sÃ©rie de Fourier ============================================================
series_combined = fourier_series_combined(t, a0_combined, ak_combined, bk_combined, NUM_TERMS)

# Calculando C1 e C2  =====================================================================================
def calculate_constants(wn, zt):
    wd = wn * np.sqrt(1 - zt**2)
    C1 = -series_combined[0] / (np.exp(-zt*wn*0) * np.cos(wd*0))
    
    derivative_fourier_series = np.sum([
        (k+1) * (-ak_combined[k] * np.sin(2*np.pi*(k+1)*0/tau) + bk_combined[k] * np.cos(2*np.pi*(k+1)*0/tau))
        for k in range(NUM_TERMS)
    ])
    
    derivative_homogeneous = lambda C2: -C1*zt*wn + C2*wd
    C2 = -derivative_fourier_series / derivative_homogeneous(1)
    
    return C1, C2

C1, C2 = calculate_constants(wn,zt)

def homogeneous_solution(t, C1, C2, wn, zt):

    wd = wn * np.sqrt(1 - zt**2)
    return np.exp(-zt*wn*t) * (C1*np.cos(wd*t) + C2*np.sin(wd*t))

# FunÃ§Ã£o permanente para cada componente da sÃ©rie de Fourier ==============================================
def permanente_cos(t, zt, w, wn, F, keq):
    b = w / wn
    U = F / keq
    phi = np.arctan(2 * b * zt / (1 - b**2))
    M = 1 / np.sqrt((1 - b**2)**2 + (2 * b * zt)**2)
    return U * M * np.cos(w * t - phi)

def permanente_sin(t, zt, w, wn, F, keq):
    b = w / wn
    U = F / keq
    phi = np.arctan(2 * b * zt / (1 - b**2))
    M = 1 / np.sqrt((1 - b**2)**2 + (2 * b * zt)**2)
    return U * M * np.sin(w * t - phi)

# Calculando a soma das funÃ§Ãµes permanentes ===============================================================
permanente_series = np.zeros_like(t)

for k in range(1, NUM_TERMS + 1):
    w = 2 * np.pi * k / tau
    Fk = ak_combined[k-1]
    permanente_series += permanente_cos(t, zt, w, wn, Fk, keq)
    Fk = bk_combined[k-1]
    permanente_series += permanente_sin(t, zt, w, wn, Fk, keq)
#print(a0_combined)

# Calculando a soma da sÃ©rie de Fourier com a soluÃ§Ã£o homogÃªnea ===========================================
homogeneous_values = homogeneous_solution(t, C1, C2, wn, zt)
particular_solution = permanente_series

# Soma da soluÃ§Ã£o homogÃªnea e particular ==================================================================
total_solution = homogeneous_values + particular_solution

# Calculando o erro quadrÃ¡tico mÃ©dio ======================================================================
mse = np.mean((original_combined - series_combined) ** 2)
print(f'Erro QuadrÃ¡tico MÃ©dio: {mse:.5f}')

#print(f'C1: {C1:.5f}, C2: {C2:.5f}')


# Plotagem ================================================================================================
def plot_signal():
    plt.plot(t, original_combined, label='FunÃ§Ã£o Original', color='black')
    plt.plot(t, series_combined, label='AproximaÃ§Ã£o de Fourier',color='red', linestyle='--')
    #plt.title('AproximaÃ§Ã£o pela sÃ©rie de Fourier - F(t)')
    plt.legend()
    plt.xlabel('t [s]')
    plt.ylabel('F [N]')
    plt.grid(True)
    plt.xlim(0, tau)
    plt.ylim(-2.5, 3.5)
    plt.show()

    
def plot_solution():

    plt.plot(t, homogeneous_values, label='SoluÃ§Ã£o HomogÃªnea', color='green', linestyle='--')
    plt.plot(t, particular_solution, label='SoluÃ§Ã£o Particular', color='blue', linestyle='-.')
    plt.plot(t, total_solution, label='SoluÃ§Ã£o Total (HomogÃªnea + Particular)', color='black', linestyle='-')

    #plt.title('SoluÃ§Ãµes U(t)')

    plt.xlim(0, tau*3)
    plt.ylim()
    plt.legend()
    plt.xlabel('t [s]')
    plt.ylabel('u [m]')
    plt.grid(True)
    plt.show()

def plot_permanent():

    plt.plot(t, permanente_series, label='FunÃ§Ã£o Permanente', color='purple', linestyle='-')

    #plt.title('SoluÃ§Ã£o permanente U(t)')

    plt.xlim(0, tau)
    plt.ylim()
    plt.legend()
    plt.xlabel('t [s]')
    plt.ylabel('u [m]')
    plt.grid(True)
    plt.show()   


# =================================
plot_solution()
plot_signal()
plot_permanent()

plt.xlim(0, tau)
plt.plot(t, original_combined, label='FunÃ§Ã£o Original', color='black')
plt.show() 
